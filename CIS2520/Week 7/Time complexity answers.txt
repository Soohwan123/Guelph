w Show that 2n2 +n= Theta (n2)
c0n^2 <= 2n^2 + n <= c1n^2
c0 <= 2 + 1/n <= c1
lim n-> infinite 1/n -> 0 so c1 = 2 or 3
Omega
2 >= c0
also 2 or 1

It proves


w Show that 2n =Ω (n)

1. Bubble Sort
설명:
Bubble Sort는 인접한 두 요소를 비교하여 더 큰 값을 뒤로 보내는 방식으로 동작하는 정렬 알고리즘입니다. 각 패스에서 가장 큰 값이 배열의 끝으로 "버블처럼" 이동합니다. 전체 배열이 정렬될 때까지 이 과정을 반복합니다.

특징:

시간 복잡도: 
최선, 평균, 최악의 경우 모두 O(n2)
공간 복잡도: O(1)
O(1) (추가 메모리가 거의 필요 없음)
정렬이 완료된 경우도 모든 요소를 확인해야 하므로 비효율적
수도코드:

pseudo
Copy code
BubbleSort(A)
    n = length(A)
    for i = 0 to n-1 do
        for j = 0 to n-i-2 do
            if A[j] > A[j+1] then
                // swap A[j] and A[j+1]
                temp = A[j]
                A[j] = A[j+1]
                A[j+1] = temp
    return A
	
	
2. Insertion Sort
설명:
Insertion Sort는 배열을 순차적으로 탐색하면서, 현재 요소를 그 이전에 있는 정렬된 부분 배열의 적절한 위치에 삽입하는 방식으로 동작합니다. 카드를 하나씩 정렬된 부분에 삽입하는 카드 게임과 유사한 방식입니다.

특징:

시간 복잡도: 
최악 O(n2)
최선 O(n)
O(n) (정렬된 배열의 경우)
공간 복잡도: O(1)
O(1)
작은 입력에 대해 효율적이고, 정렬이 거의 되어 있는 데이터에 대해 성능이 좋음
수도코드:

pseudo
Copy code
InsertionSort(A)
    n = length(A)
    for i = 1 to n-1 do
        key = A[i]
        j = i - 1
        while j >= 0 and A[j] > key do
            A[j + 1] = A[j]
            j = j - 1
        A[j + 1] = key
    return A
	
3. Selection Sort
설명:
Selection Sort는 배열에서 가장 작은 요소를 선택하여 첫 번째 위치와 교환한 후, 남은 부분에서 다시 가장 작은 요소를 선택해 두 번째 위치와 교환하는 방식으로 동작합니다. 이 과정을 배열이 모두 정렬될 때까지 반복합니다.

특징:

시간 복잡도: 
최선, 평균, 최악의 경우 모두 
O(n2)

공간 복잡도: 
O(1)
비교 횟수는 고정되어 있지만, 교환 횟수가 적어 상대적으로 적은 교환을 수행
수도코드:

pseudo
Copy code
SelectionSort(A)
    n = length(A)
    for i = 0 to n-1 do
        min_index = i
        for j = i+1 to n-1 do
            if A[j] < A[min_index] then
                min_index = j
        // swap A[i] and A[min_index]
        temp = A[i]
        A[i] = A[min_index]
        A[min_index] = temp
    return A
요약
Bubble Sort: 인접한 두 요소를 비교하여 가장 큰 값을 뒤로 보냄.
Insertion Sort: 배열의 각 요소를 순차적으로 그 이전의 정렬된 배열에 삽입.
Selection Sort: 배열에서 가장 작은 값을 찾아서 첫 번째 요소와 교환.



